name: Release & Publish

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      npm_tag:
        description: 'NPM tag (latest, beta, alpha)'
        required: false
        default: 'latest'
        type: choice
        options:
          - latest
          - beta
          - alpha

jobs:
  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build library
        run: npm run build

      - name: Update package version (manual)
        if: github.event_name == 'workflow_dispatch'
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          if [ "$CURRENT_VERSION" != "${{ github.event.inputs.version }}" ]; then
            npm version ${{ github.event.inputs.version }} --no-git-tag-version
          else
            echo "Version already set to ${{ github.event.inputs.version }}"
          fi

      - name: Publish to NPM
        run: npm publish --tag ${{ github.event.inputs.npm_tag || 'latest' }} --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: publish
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get package version
        id: package-version
        run: echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT

      - name: Create Release Notes
        id: release-notes
        run: |
          echo "## Release Notes" > release-notes.md
          echo "" >> release-notes.md
          echo "### Features" >> release-notes.md
          echo "- Released version ${{ steps.package-version.outputs.version }}" >> release-notes.md
          echo "" >> release-notes.md
          echo "### Installation" >> release-notes.md
          echo '```bash' >> release-notes.md
          echo "npm install @rabelium/cqrs@${{ steps.package-version.outputs.version }}" >> release-notes.md
          echo '```' >> release-notes.md

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.package-version.outputs.version }}
          release_name: Release v${{ steps.package-version.outputs.version }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ github.event.inputs.npm_tag != 'latest' }} 