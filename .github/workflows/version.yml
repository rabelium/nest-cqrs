name: Version & Release

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type to bump'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  version:
    name: Create Version & Release
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, 'chore(release)') }}
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build library
        run: npm run build

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine version bump
        id: version-bump
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "type=${{ github.event.inputs.version_type }}" >> $GITHUB_OUTPUT
          else
            # Analyze commit messages for conventional commits
            if git log --format=%s -n 10 | grep -q "^feat"; then
              echo "type=minor" >> $GITHUB_OUTPUT
            elif git log --format=%s -n 10 | grep -q "BREAKING CHANGE\|^feat!"; then
              echo "type=major" >> $GITHUB_OUTPUT
            else
              echo "type=patch" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Bump version
        id: version
        run: |
          VERSION_TYPE=${{ steps.version-bump.outputs.type }}
          NEW_VERSION=$(npm version $VERSION_TYPE --no-git-tag-version)
          echo "version=${NEW_VERSION#v}" >> $GITHUB_OUTPUT
          echo "tag=${NEW_VERSION}" >> $GITHUB_OUTPUT

      - name: Update CHANGELOG
        run: |
          echo "## [${{ steps.version.outputs.version }}] - $(date +%Y-%m-%d)" > CHANGELOG_NEW.md
          echo "" >> CHANGELOG_NEW.md
          echo "### Changes" >> CHANGELOG_NEW.md
          git log --format="- %s" $(git describe --tags --abbrev=0 2>/dev/null || echo "HEAD~10")..HEAD >> CHANGELOG_NEW.md
          echo "" >> CHANGELOG_NEW.md
          if [[ -f CHANGELOG.md ]]; then
            cat CHANGELOG.md >> CHANGELOG_NEW.md
          fi
          mv CHANGELOG_NEW.md CHANGELOG.md

      - name: Commit version bump
        run: |
          git add package.json package-lock.json CHANGELOG.md
          git commit -m "chore(release): bump version to ${{ steps.version.outputs.version }}"
          git tag ${{ steps.version.outputs.tag }}
          git push origin main --tags

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          release_name: Release ${{ steps.version.outputs.tag }}
          body: |
            ## Release ${{ steps.version.outputs.tag }}
            
            ### Changes
            See [CHANGELOG.md](./CHANGELOG.md) for detailed changes.
            
            ### Installation
            ```bash
            npm install @rabelium/cqrs@${{ steps.version.outputs.version }}
            ```
          draft: false
          prerelease: false 